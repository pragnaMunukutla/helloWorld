#include <stdio.h>
#include <stdlib.h>

//Remove Duplicates from Array
int removeDuplicates(int* array,int n){
    
    int j=0,i=0;
    
    for(i=0;i<n-1;i++){
        if(array[i]!=array[i+1])
            array[j++]=array[i];
    }
    
    array[j++]=array[n-1];
    
    return j;
}

//Given elements in an array find the element which is not repeated
int findOne(int* array,int n){
    
    int i,res=array[0];
    
    for(i=1;i<n;i++)
        res=res^array[i];
        
    return res;
}
int main()
{
    int* array;
    int n,i,j;
    
    scanf("%d",&n);
    
    array=(int*)malloc(n*sizeof(int));
    
    printf("Enter %d elements",n);
    for(i=0;i<n;i++)
        scanf("%d",&array[i]);
    
    printf("%d",findOne);
    j=removeDuplicates(array,i);
    
    for(i=0;i<j;i++)
        printf("%d ",array[i]);
}

//LRU Cache Implementation
#include<stdio.h>
#include<stdlib.h>

int lruCountMiss(int cachesize,int* pages,int n){
    
    int* cache = (int*)calloc(cachesize,sizeof(int));
    int i,j,k,miss=0;
    
    for(i=0;i<cachesize;i++)
        cache[i]=0x87787;
    
    for(i=0;i<n;i++){
        for(j=0;j<cachesize;j++){
            if(pages[i]==cache[j]){
                for(k=i;k<cachesize;k++)
                    cache[k]=cache[k+1];
                cache[cachesize-1]=pages[i];
                break;
            }
            else if(j==cachesize-1){
                for(k=0;k<cachesize;k++)
                    cache[k]=cache[k+1];
                cache[cachesize-1]=pages[i];
                miss++;
            }
        }
    }
    
    return miss;
    
}
int main(){
    
    int days,pages[]={7,0,1,2,0,3,0,4,2,3,0,3,2,1,2,0};
    int *cellsptr=pages;
    printf("%d ",lruCountMiss(3,cellsptr,16));
}
